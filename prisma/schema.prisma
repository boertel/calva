// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Calendar Calendar[]
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Todo          Todo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id        String   @id @default(cuid())
  userId    String
  text      String
  status    String?  @default("todo")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Calendar {
  id        String   @id @default(cuid())
  ownerId   String
  slug      String
  owner     Account  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]

  watchId   String?
  syncToken String?

  @@unique([ownerId, slug])
}

model Event {
  id          String   @id @default(cuid())
  start       String
  end         String
  timezone    String?
  recurrence  String?
  status      String
  summary     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  externalId  String?
  calendarId  String
  calendar    Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@unique([externalId, calendarId])
}
